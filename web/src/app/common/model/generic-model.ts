/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class DefaultClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getAll(): Observable<GenericModel | null> {
        let url_ = this.baseUrl + "/api/Default";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<GenericModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<GenericModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<GenericModel | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GenericModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GenericModel | null>(<any>null);
    }
}

export class GenericModel implements IGenericModel {
    filterProfileRequest?: FilterProfileRequest | undefined;
    filterProfileResponse?: FilterProfileResponse | undefined;

    constructor(data?: IGenericModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.filterProfileRequest = _data["filterProfileRequest"] ? FilterProfileRequest.fromJS(_data["filterProfileRequest"]) : <any>undefined;
            this.filterProfileResponse = _data["filterProfileResponse"] ? FilterProfileResponse.fromJS(_data["filterProfileResponse"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GenericModel {
        data = typeof data === 'object' ? data : {};
        let result = new GenericModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["filterProfileRequest"] = this.filterProfileRequest ? this.filterProfileRequest.toJSON() : <any>undefined;
        data["filterProfileResponse"] = this.filterProfileResponse ? this.filterProfileResponse.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGenericModel {
    filterProfileRequest?: FilterProfileRequest | undefined;
    filterProfileResponse?: FilterProfileResponse | undefined;
}

export class FilterProfileRequest implements IFilterProfileRequest {
    id_number?: string | undefined;
    full_name?: string | undefined;
    phone_number?: string | undefined;
    type_of_loan?: number | undefined;
    product_loan?: string | undefined;
    loan_form?: number | undefined;
    form_payment?: number | undefined;
    type_customer?: number | undefined;
    create_from?: string | undefined;
    create_to?: string | undefined;
    classify_cutomer?: string | undefined;

    constructor(data?: IFilterProfileRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id_number = _data["id_number"];
            this.full_name = _data["full_name"];
            this.phone_number = _data["phone_number"];
            this.type_of_loan = _data["type_of_loan"];
            this.product_loan = _data["product_loan"];
            this.loan_form = _data["loan_form"];
            this.form_payment = _data["form_payment"];
            this.type_customer = _data["type_customer"];
            this.create_from = _data["create_from"];
            this.create_to = _data["create_to"];
            this.classify_cutomer = _data["classify_cutomer"];
        }
    }

    static fromJS(data: any): FilterProfileRequest {
        data = typeof data === 'object' ? data : {};
        let result = new FilterProfileRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id_number"] = this.id_number;
        data["full_name"] = this.full_name;
        data["phone_number"] = this.phone_number;
        data["type_of_loan"] = this.type_of_loan;
        data["product_loan"] = this.product_loan;
        data["loan_form"] = this.loan_form;
        data["form_payment"] = this.form_payment;
        data["type_customer"] = this.type_customer;
        data["create_from"] = this.create_from;
        data["create_to"] = this.create_to;
        data["classify_cutomer"] = this.classify_cutomer;
        return data; 
    }
}

export interface IFilterProfileRequest {
    id_number?: string | undefined;
    full_name?: string | undefined;
    phone_number?: string | undefined;
    type_of_loan?: number | undefined;
    product_loan?: string | undefined;
    loan_form?: number | undefined;
    form_payment?: number | undefined;
    type_customer?: number | undefined;
    create_from?: string | undefined;
    create_to?: string | undefined;
    classify_cutomer?: string | undefined;
}

export class GenericResponse implements IGenericResponse {
    errorCode?: string | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IGenericResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.errorCode = _data["errorCode"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): GenericResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GenericResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["errorCode"] = this.errorCode;
        data["errorMessage"] = this.errorMessage;
        return data; 
    }
}

export interface IGenericResponse {
    errorCode?: string | undefined;
    errorMessage?: string | undefined;
}

export class FilterProfileResponse extends GenericResponse implements IFilterProfileResponse {
    list_new_profile?: Profile[] | undefined;
    list_old_profile?: Profile[] | undefined;
    current_page!: number;
    role!: number;

    constructor(data?: IFilterProfileResponse) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["list_new_profile"])) {
                this.list_new_profile = [] as any;
                for (let item of _data["list_new_profile"])
                    this.list_new_profile!.push(Profile.fromJS(item));
            }
            if (Array.isArray(_data["list_old_profile"])) {
                this.list_old_profile = [] as any;
                for (let item of _data["list_old_profile"])
                    this.list_old_profile!.push(Profile.fromJS(item));
            }
            this.current_page = _data["current_page"];
            this.role = _data["role"];
        }
    }

    static fromJS(data: any): FilterProfileResponse {
        data = typeof data === 'object' ? data : {};
        let result = new FilterProfileResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.list_new_profile)) {
            data["list_new_profile"] = [];
            for (let item of this.list_new_profile)
                data["list_new_profile"].push(item.toJSON());
        }
        if (Array.isArray(this.list_old_profile)) {
            data["list_old_profile"] = [];
            for (let item of this.list_old_profile)
                data["list_old_profile"].push(item.toJSON());
        }
        data["current_page"] = this.current_page;
        data["role"] = this.role;
        super.toJSON(data);
        return data; 
    }
}

export interface IFilterProfileResponse extends IGenericResponse {
    list_new_profile?: Profile[] | undefined;
    list_old_profile?: Profile[] | undefined;
    current_page: number;
    role: number;
}

export class Profile implements IProfile {
    id_profile?: string | undefined;
    fullname?: string | undefined;
    id_number?: string | undefined;
    scope?: string | undefined;
    status?: string | undefined;

    constructor(data?: IProfile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id_profile = _data["id_profile"];
            this.fullname = _data["fullname"];
            this.id_number = _data["id_number"];
            this.scope = _data["scope"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): Profile {
        data = typeof data === 'object' ? data : {};
        let result = new Profile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id_profile"] = this.id_profile;
        data["fullname"] = this.fullname;
        data["id_number"] = this.id_number;
        data["scope"] = this.scope;
        data["status"] = this.status;
        return data; 
    }
}

export interface IProfile {
    id_profile?: string | undefined;
    fullname?: string | undefined;
    id_number?: string | undefined;
    scope?: string | undefined;
    status?: string | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}